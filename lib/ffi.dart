// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Subscoial FFI Binding
class RawSubsoical {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RawSubsoical(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RawSubsoical.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int subsocial_dispatch(
    int port,
    ffi.Pointer<Uint8List> buffer,
  ) {
    return _subsocial_dispatch(
      port,
      buffer,
    );
  }

  late final _subsocial_dispatch_ptr =
      _lookup<ffi.NativeFunction<_c_subsocial_dispatch>>('subsocial_dispatch');
  late final _dart_subsocial_dispatch _subsocial_dispatch =
      _subsocial_dispatch_ptr.asFunction<_dart_subsocial_dispatch>();

  /// Dispose (a la drop) the Client and all active connections.
  /// if the client is still there, it will close it and return `1`
  /// otherwise, returns 0xdead.
  int subsocial_dispose_client() {
    return _subsocial_dispose_client();
  }

  late final _subsocial_dispose_client_ptr =
      _lookup<ffi.NativeFunction<_c_subsocial_dispose_client>>(
          'subsocial_dispose_client');
  late final _dart_subsocial_dispose_client _subsocial_dispose_client =
      _subsocial_dispose_client_ptr
          .asFunction<_dart_subsocial_dispose_client>();

  /// Dispose (a la drop) the Signer and zerozie the memory.
  /// if the signer is still there, it will drop it and return `1`
  /// otherwise, returns 0xdead.
  int subsocial_dispose_signer() {
    return _subsocial_dispose_signer();
  }

  late final _subsocial_dispose_signer_ptr =
      _lookup<ffi.NativeFunction<_c_subsocial_dispose_signer>>(
          'subsocial_dispose_signer');
  late final _dart_subsocial_dispose_signer _subsocial_dispose_signer =
      _subsocial_dispose_signer_ptr
          .asFunction<_dart_subsocial_dispose_signer>();

  /// Init the SDK
  ///
  /// ### Safety
  /// This should only called once, in the beginning of the application.
  /// otherwise it would be **UB** if called more than once while there is other calls to the SDK.
  ///
  /// However, you can call this again, if you disposed the client and the signer.
  ///
  /// We added checks as a safety mechanism, to ensure no UB would happen,
  /// but take care that not all paths are tested here.
  int subsocial_init_sdk(
    int port,
    ffi.Pointer<SubscoialConfig> config,
  ) {
    return _subsocial_init_sdk(
      port,
      config,
    );
  }

  late final _subsocial_init_sdk_ptr =
      _lookup<ffi.NativeFunction<_c_subsocial_init_sdk>>('subsocial_init_sdk');
  late final _dart_subsocial_init_sdk _subsocial_init_sdk =
      _subsocial_init_sdk_ptr.asFunction<_dart_subsocial_init_sdk>();

  /// a no-op function that forces xcode to link to our lib.
  /// ## Safety
  /// lol
  void subsocial_link_me_plz() {
    return _subsocial_link_me_plz();
  }

  late final _subsocial_link_me_plz_ptr =
      _lookup<ffi.NativeFunction<_c_subsocial_link_me_plz>>(
          'subsocial_link_me_plz');
  late final _dart_subsocial_link_me_plz _subsocial_link_me_plz =
      _subsocial_link_me_plz_ptr.asFunction<_dart_subsocial_link_me_plz>();
}

class SubscoialConfig extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> url;
}

/// Owned version of Dart's [Uint8List] in Rust.
///
/// **Note**: Automatically frees the underlying memory allocated from Dart.
class Uint8List extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> buf;

  @ffi.Uint64()
  external int len;
}

typedef _c_subsocial_dispatch = ffi.Int32 Function(
  ffi.Int64 port,
  ffi.Pointer<Uint8List> buffer,
);

typedef _dart_subsocial_dispatch = int Function(
  int port,
  ffi.Pointer<Uint8List> buffer,
);

typedef _c_subsocial_dispose_client = ffi.Int32 Function();

typedef _dart_subsocial_dispose_client = int Function();

typedef _c_subsocial_dispose_signer = ffi.Int32 Function();

typedef _dart_subsocial_dispose_signer = int Function();

typedef _c_subsocial_init_sdk = ffi.Int32 Function(
  ffi.Int64 port,
  ffi.Pointer<SubscoialConfig> config,
);

typedef _dart_subsocial_init_sdk = int Function(
  int port,
  ffi.Pointer<SubscoialConfig> config,
);

typedef _c_subsocial_link_me_plz = ffi.Void Function();

typedef _dart_subsocial_link_me_plz = void Function();
